resources:
- name: pcf-automation-tasks
  type: s3
  source:
    access_key_id: ((s3_accesskey))
    secret_access_key: ((s3_secretkey))
    endpoint: ((s3_url))
    bucket: pivnet-products
    regexp: automation/.*tasks-(.*).zip

- name: pcf-automation-image
  type: s3
  source:
    access_key_id: ((s3_accesskey))
    secret_access_key: ((s3_secretkey))
    endpoint: ((s3_url))
    bucket: pivnet-products
    regexp: automation/.*image-(.*).tgz

- name: opsman-image
  type: s3
  source:
    access_key_id: ((s3_accesskey))
    secret_access_key: ((s3_secretkey))
    endpoint: ((s3_url))
    bucket: pivnet-products
    regexp: opsman/((product_file_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova

- name: installation
  type: s3
  source:
    access_key_id: ((s3_accesskey))
    secret_access_key: ((s3_secretkey))
    endpoint: ((s3_url))
    bucket: pcf-exports
    regexp: ((foundation_name))/installation-(.*).zip

# triggers used to have jobs do something in a timely manner

- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: daily-trigger
  type: time
  source:
    interval: 24h

# configurations

- name: configuration
  type: git
  source:
    private_key: ((git_private_key.private_key))
    uri: ((config_git_repo_url))
    branch: master
    paths:
    - '**/opsman.yml'
    - '**/director.yml'

# resource locking and state

- name: environment-lock
  type: pool
  source:
    private_key: ((git_private_key.private_key))
    uri: ((state_git_repo_url))
    branch: master
    pool: locks/foundations/((foundation_name))

- name: state
  type: git
  source:
    private_key: ((git_private_key.private_key))
    uri: ((state_git_repo_url))
    branch: master

# common tasks

locks:
# lock foundation
- &lock-environment
  put: environment-lock
  params: {claim: opsman}
# unlock foundation
- &unlock-environment
  put: environment-lock
  params: {release: environment-lock}
# commit opsman instance state
- &make-state-commit
  do:
  - task: make-commit
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/make-git-commit.yml
    input_mapping:
      repository: state
      file-source: generated-state
    output_mapping:
      repository-commit: state-commit
    params:
      FILE_SOURCE_PATH: state.yml
      FILE_DESTINATION_PATH: foundations/((foundation_name))/state/state.yml
      GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
      GIT_AUTHOR_NAME: "PCF Automation Bot"
      COMMIT_MESSAGE: 'Update state file'
  - put: state
    params:
      repository: state-commit
      merge: true
      
# jobs pipeline

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - *lock-environment

  - aggregate:
    - get: one-time-trigger
      trigger: true
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: opsman-image
    - get: configuration
      trigger: true
    - get: state

  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_SERVER: ((credhub_url))
      CREDHUB_CLIENT: ((credhub_client_id))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_CA_CERT: ((default_ca.ca))
      PREFIX: '/pcf/((foundation_name))'
      INTERPOLATION_PATH: "foundations/((foundation_name))"
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: interpolated-configs

  - task: create-vm
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: state
      config: configuration
      vars: interpolated-configs
    params:
      VARS_FILES: vars/foundations/((foundation_name))/vars/opsman.yml
      STATE_FILE: foundations/((foundation_name))/state/state.yml
      OPSMAN_CONFIG_FILE: templates/opsman.yml
    ensure: *make-state-commit

  - task: configure-authentication
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      config: interpolated-configs
      env: interpolated-configs
    params:
      ENV_FILE: foundations/((foundation_name))/env/env.yml
      AUTH_CONFIG_FILE: foundations/((foundation_name))/vars/auth.yml

  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      vars: interpolated-configs
      env: interpolated-configs
    params:
      ENV_FILE: foundations/((foundation_name))/env/env.yml
      VARS_FILES: vars/foundations/((foundation_name))/vars/director.yml
      DIRECTOR_CONFIG_FILE: templates/director.yml

  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-configs
    params:
      ENV_FILE: foundations/((foundation_name))/env/env.yml
  
  ensure: *unlock-environment

- name: export-installation
  serial: true
  plan:
  - *lock-environment

  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: configuration

  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_SERVER: ((credhub_url))
      CREDHUB_CLIENT: ((credhub_client_id))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_CA_CERT: ((default_ca.ca))
      PREFIX: '/pcf/((foundation_name))'
      INTERPOLATION_PATH: "foundations/((foundation_name))"
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: interpolated-configs

  - task: export-installation
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-configs
    params:
      ENV_FILE: foundations/((foundation_name))/env/env.yml
  - put: installation
    params:
      file: installation/installation-*.zip
  
  ensure: *unlock-environment

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - *lock-environment

  - aggregate:
    - get: one-time-trigger
      passed: [ install-opsman ]
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: opsman-image
    - get: installation
      passed: [ export-installation ]
    - get: configuration

  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_SERVER: ((credhub_url))
      CREDHUB_CLIENT: ((credhub_client_id))
      CREDHUB_SECRET: ((credhub_client_secret))
      CREDHUB_CA_CERT: ((default_ca.ca))
      PREFIX: '/pcf/((foundation_name))'
      INTERPOLATION_PATH: "foundations/((foundation_name))"
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: interpolated-configs

  - task: upgrade-opsman
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
      state: configuration
      config: interpolated-configs
      env: interpolated-configs
    params:
      ENV_FILE: foundations/((foundation_name))/env/env.yml
      STATE_FILE: foundations/((foundation_name))/state/state.yml
      VARS_FILES: vars/foundations/((foundation_name))/vars/opsman.yml
      OPSMAN_CONFIG_FILE: templates/opsman.yml
    ensure: *make-state-commit
    
  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-configs
    params:
      ENV_FILE: ((foundation_name))/config/env.yml
  
  ensure: *unlock-environment
